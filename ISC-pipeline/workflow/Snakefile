# ---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids


configfile: "config/snakebids.yml"


# writes inputs_config.yml and updates config dict
inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_config=["bids", "derivatives"],
    # derivatives=config["derivatives"],
    participant_label=config["participant_label"],
    exclude_participant_label=config["exclude_participant_label"],
    use_bids_inputs=True,
)


# this adds constraints to the bids naming
wildcard_constraints:
    **snakebids.get_wildcard_constraints(config["pybids_inputs"]),


# ---- end snakebids boilerplate ------------------------------------------------


# additional constraints for wildcards not defined from inputs
wildcard_constraints:
    desc="[a-zA-Z0-9]+",
    fwhm="[0-9]+",
    confounds="[0-9]+",


rule all:
    input:
        # using the zip lists to expand over all scans, note use of the zip option in expand:
        denoised=expand(
            expand(
                bids(
                    root="results",
                    datatype="func",
                    desc="{{desc}}",
                    fwhm="{{fwhm}}",
                    confounds="{{confounds_idx}}",
                    suffix="bold.nii.gz",
                    **inputs["preproc_bold"].wildcards
                ),
                zip,
                **inputs["preproc_bold"].zip_lists
            ),
            fwhm=config["fwhm"],
            confounds_idx=range(1, len(config["confounds"]) + 1),
            desc=["denoised", "AROMAdenoised"],
        ),


rule smooth:
    input:
        nii=inputs["preproc_bold"].path,
        json=re.sub(".nii.gz", ".json", inputs["preproc_bold"].path),
    params:
        fwhm=lambda wildcards: float(wildcards.fwhm),
    output:
        nii=bids(
            root="results",
            datatype="func",
            desc="smoothed",
            fwhm="{fwhm}",
            suffix="bold.nii.gz",
            **inputs["preproc_bold"].wildcards
        ),
        json=bids(
            root="results",
            datatype="func",
            desc="smoothed",
            fwhm="{fwhm}",
            suffix="bold.json",
            **inputs["preproc_bold"].wildcards
        ),
    group:
        "subj"
    script:
        "scripts/smooth.py"


rule denoise:
    input:
        nii=bids(
            root="results",
            datatype="func",
            desc="smoothed",
            fwhm="{fwhm}",
            suffix="bold.nii.gz",
            **inputs["preproc_bold"].wildcards
        ),
        json=bids(
            root="results",
            datatype="func",
            desc="smoothed",
            fwhm="{fwhm}",
            suffix="bold.json",
            **inputs["preproc_bold"].wildcards
        ),
        confounds_tsv=inputs["confounds"].path,
        mask_nii=inputs["preproc_mask"].path,
    params:
        confounds_to_use=lambda wildcards: config["confounds"][
            int(wildcards.confounds_idx) - 1
        ]["regressors"],
        confounds_name=lambda wildcards: config["confounds"][
            int(wildcards.confounds_idx) - 1
        ]["name"],
        standardize=True,
        detrend=True,
        low_pass=False,
        high_pass=False,
    output:
        nii=bids(
            root="results",
            datatype="func",
            desc="denoised",
            fwhm="{fwhm}",
            confounds="{confounds_idx}",
            suffix="bold.nii.gz",
            **inputs["preproc_bold"].wildcards
        ),
        json=bids(
            root="results",
            datatype="func",
            desc="denoised",
            fwhm="{fwhm}",
            confounds="{confounds_idx}",
            suffix="bold.json",
            **inputs["preproc_bold"].wildcards
        ),
    group:
        "subj"
    script:
        "scripts/denoise.py"


rule just_denoise:
    input:
        denoised=expand(
            expand(
                rules.denoise.output.nii,
                zip,
                **inputs["preproc_bold"].zip_lists,
                allow_missing=True
            ),
            fwhm=config["fwhm"],
            confounds_idx=range(1, len(config["confounds"]) + 1)
        ),
    default_target: True

